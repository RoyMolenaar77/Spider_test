<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ include file="T4Toolbox.tt" #>
<#@ assembly Name="System" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="System.Data" #>
<#@ assembly Name="System.Xml" #>
<#@ assembly Name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly Name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly Name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.VisualStudio.TextTemplating.11.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(SolutionDir)Tools\Concentrator.Tools.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.SqlServer.Management.Common" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="EnvDTE" #>
<#@ parameter name="ConnectionString" type="System.String" #>
<#@ parameter name="DefaultSchema" type="System.String" #>
<#@ parameter name="Schemas" type="System.String" #>
<#@ parameter name="Objects" type="System.String" #>
<#@ parameter name="Class" type="System.String" #>
<#@ parameter name="Namespace" type="System.String" #>
<#@ parameter name="IsPublic" type="System.Boolean" #>
<#
  if (String.IsNullOrWhiteSpace(Session["ConnectionString"] as String))
  {
    return "// Connection String was not specified in the parameters...";
  }
  
  if (!Session.ContainsKey("DefaultSchema"))
  {
    Session["DefaultSchema"] = "dbo";
  }

  if (!Session.ContainsKey("IsPublic"))
  {
    Session["IsPublic"] = false;
  }

  var serviceProvider = Host as IServiceProvider;
  var visualStudio = serviceProvider.GetService(typeof(DTE)) as DTE;

  Session["Class"] = Class ?? Host.TemplateFile.Split(new[] { '.' }, StringSplitOptions.RemoveEmptyEntries).First();

  var project = visualStudio.Solution.FindProjectItem(Host.TemplateFile).ContainingProject;

  Session["Namespace"] = Namespace ?? project
    .Properties
    .Cast<EnvDTE.Property>()
    .Single(property => property.Name == "DefaultNamespace")
    .Value;

  var textEditor = visualStudio.Properties["TextEditor", "CSharp"] as Properties;
  var indent = !(Boolean)textEditor.Item("InsertTabs").Value
    ? new String(' ', (Int16)textEditor.Item("IndentSize").Value)
    : "\t";

  Session["Indent"] = indent;

  var connection = new SqlConnection(ConnectionString);
  var serverConnection = new ServerConnection(connection);
  var server = new Server(serverConnection);
  var database = server.Databases.Cast<Database>().First(db => db.Name == connection.Database);

  var includedObjectNames = Objects
    .Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)
    .Select(pattern => new Regex(pattern, RegexOptions.Compiled | RegexOptions.ExplicitCapture | RegexOptions.IgnorePatternWhitespace))
    .ToArray();

  var storedProcedureLookup = database
    .StoredProcedures
    .Cast<StoredProcedure>()
    .Where(item => includedObjectNames.Length == 0 || includedObjectNames.Any(regex => regex.IsMatch(item.Name)))
    .ToLookup(item => item.Schema);

  var tableLookup = database
    .Tables
    .Cast<Table>()
    .Where(item => includedObjectNames.Length == 0 || includedObjectNames.Any(regex => regex.IsMatch(item.Name)))
    .ToLookup(item => item.Schema);
  
  var viewLookup = database
    .Views
    .Cast<View>()
    .Where(item => includedObjectNames.Length == 0 || includedObjectNames.Any(regex => regex.IsMatch(item.Name)))
    .ToLookup(item => item.Schema);
  
  var includedSchemas = Schemas
    .Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)
    .Select(schemaName => schemaName.Trim())
    .ToArray();

  GenerationEnvironment.Clear();
  WriteLine("using System;");
  WriteLine(String.Empty);
  WriteLine("namespace {0}", Convert.ToString(Session["Namespace"]) ?? String.Empty);

  using (this.Scope(indent))
  {
    var modifier = Convert.ToBoolean(Session["IsPublic"])
      ? "public "
      : "internal ";
  
    WriteLine(modifier + "static partial class {0}", Session["Class"]);
    
    using (this.Scope(indent))
    {
      var defaultSchema = Session["DefaultSchema"] as String;

      foreach (var schemaName in database.Schemas
        .Cast<Schema>()
        .Select(schema => schema.Name)
        .Where(schemaName => includedSchemas.Contains(schemaName))
        .Where(schemaName => storedProcedureLookup[schemaName].Any() || tableLookup[schemaName].Any() || viewLookup[schemaName].Any()))
      {
        if (!defaultSchema.Equals(schemaName, StringComparison.OrdinalIgnoreCase))
        {
          WriteLine(modifier + "static partial class {0}", schemaName);
        
          using (this.Scope(indent))
          {
            GenerateConstantsClass(this, storedProcedureLookup[schemaName], tableLookup[schemaName], viewLookup[schemaName]);
          }
        }
        else
        {
          GenerateConstantsClass(this, storedProcedureLookup[schemaName], tableLookup[schemaName], viewLookup[schemaName]);
        }
      }
    }
  }
#>
<#+
  private void GenerateConstantsClass(TextTransformation textTransformation
    , IEnumerable<StoredProcedure> storedProcedures
    , IEnumerable<Table> tables
    , IEnumerable<View> views)
  {  
    var classTemplate = default(ClassTemplate);
    var defaultSchema = Session["DefaultSchema"] as String;
    
    var modifier = Convert.ToBoolean(Session["IsPublic"])
      ? "public"
      : "internal";
  
    foreach (var storedProcedure in storedProcedures)
    {
      textTransformation.WriteLine(modifier + " const String {0} = \"{1}\";", storedProcedure.Name, storedProcedure);

      classTemplate = new ProcedureTemplate(storedProcedure);
      classTemplate.RenderToFile(!defaultSchema.Equals(storedProcedure.Schema, StringComparison.OrdinalIgnoreCase)
        ? String.Format("Database/Procedures/{0}/{1}.cs", storedProcedure.Schema, storedProcedure.Name)
        : String.Format("Database/Procedures/{0}.cs", storedProcedure.Name));
    }

    if (storedProcedures.Any() && tables.Any())
    {
      textTransformation.WriteLine();
    }

    foreach (var table in tables)
    {
      if (!table.Name.StartsWith("__"))
      {
        textTransformation.WriteLine(modifier + " const String {0} = \"{1}\";", table.Name, table);
              
        classTemplate = new TableTemplate(table);
        classTemplate.RenderToFile(!defaultSchema.Equals(table.Schema, StringComparison.OrdinalIgnoreCase)
          ? String.Format("Database/Tables/{0}/{1}.cs", table.Schema, table.Name)
          : String.Format("Database/Tables/{0}.cs", table.Name));
              
        classTemplate = new ModelTemplate(table);
        classTemplate.RenderToFile(!defaultSchema.Equals(table.Schema, StringComparison.OrdinalIgnoreCase)
          ? String.Format("Models/{0}/{1}.cs", table.Schema, table.Name)
          : String.Format("Models/{0}.cs", table.Name));
      }
    }
    
    if (tables.Any() && views.Any())
    {
      textTransformation.WriteLine();
    }
    
    foreach (var view in views)
    {
      textTransformation.WriteLine(modifier + " const String {0} = \"{1}\";", view.Name, view);
            
      classTemplate = new ViewTemplate(view);
      classTemplate.RenderToFile(!defaultSchema.Equals(view.Schema, StringComparison.OrdinalIgnoreCase)
        ? String.Format("Database/Views/{0}/{1}.cs", Class, view.Schema, view.Name)
        : String.Format("Database/Views/{0}.cs", Class, view.Name));
    }
  }
#>
<#+
  public abstract class ClassTemplate : Template
  {
    protected virtual String Class
    {
      get
      {
        return Session["Class"] as String;
      }
    }

    protected virtual String DefaultSchema
    {
      get
      {
        return Session["DefaultSchema"] as String;
      }
    }
    
    protected ICollection<String> Imports
    {
      get;
      private set;
    }

    protected virtual String Indent
    {
      get
      {
        return Session["Indent"] as String;
      }
    }
    
    protected virtual String Modifier
    {
      get
      {
        return Convert.ToBoolean(Session["IsPublic"])
          ? "public"
          : "internal";
      }
    }

    protected virtual String Namespace
    {
      get
      {
        return Session["Namespace"] as String;
      }
    }

    protected ClassTemplate()
    {
      Imports = new List<String>()
      {
        "System"
      };
    }

    protected Type GetType(SqlDataType dataType)
    {
      switch (dataType)
      {
        case SqlDataType.Bit:
          return typeof(Boolean);

        case SqlDataType.BigInt:
          return typeof(Int64);

        case SqlDataType.DateTime:
        case SqlDataType.DateTime2:
          return typeof(DateTime);

        case SqlDataType.TinyInt:
          return typeof(Byte);

        case SqlDataType.Int:
          return typeof(Int32);

        case SqlDataType.SmallInt:
          return typeof(Int16);

        case SqlDataType.NVarChar:
        case SqlDataType.NVarCharMax:
        case SqlDataType.NText:
        case SqlDataType.Text:
        case SqlDataType.VarChar:
        case SqlDataType.VarCharMax:
          return typeof(String);

        default:
          WriteLine(String.Empty);
          WriteLine("// WARNING: The SqlDataType '{0}' could not be mapped to a .NET type.", dataType);
          return typeof(Object);
      }
    }

    protected String GetTypeName(SqlDataType dataType, Boolean fullName = false)
    {
      var type = GetType(dataType);

      return fullName ? type.FullName : type.Name;
    }

    protected virtual void GenerateClass()
    {
      WriteLine(Modifier + " partial class {0}", Class);
        
      using (this.Scope(Indent))
      {
        GenerateClassBody();
      }
    }

    protected abstract void GenerateClassBody();

    public override String TransformText()
    {
      foreach (var import in Imports)
      {
        WriteLine("using {0};", import);
      }

      WriteLine();
      WriteLine("namespace {0}", Namespace);
      
      using (this.Scope(Indent))
      {
        GenerateClass();
      }

      return GenerationEnvironment.ToString();
    }

    public void WriteLine()
    {
      WriteLine(String.Empty);
    }
  }
#>
<#+
  public class ProcedureTemplate : ClassTemplate
  {
    private StoredProcedure Procedure
    {
      get;
      set;
    }

    public ProcedureTemplate(StoredProcedure storedProcedure)
    {
      Procedure = storedProcedure;
      
      Imports.Add("System.Collections.Generic");
      Imports.Add("System.Data");
      Imports.Add("System.Data.Linq");
      Imports.Add("Dapper");
    }

    protected override void GenerateClassBody()
    {
      if (DefaultSchema.Equals(Procedure.Schema, StringComparison.OrdinalIgnoreCase))
      {
        GenerateProcedureCommandClass();
      }
      else
      {
        WriteLine(Modifier + " static partial class {0}", Procedure.Schema);
        
        using (this.Scope(Indent))
        {
          GenerateProcedureCommandClass();
        }
      }
    }

    private void GenerateProcedureCommandClass()
    {
      var commandClassName = Procedure.Name + "Command";

      WriteLine(Modifier + " partial class {0} : IDisposable", commandClassName);
      
      var parameters = Procedure.Parameters.Cast<StoredProcedureParameter>().ToArray();

      using (this.Scope(Indent))
      {
        var commandFieldName = "_command";

        WriteLine("private readonly IDbCommand {0} = null;", commandFieldName);

        foreach (var parameter in parameters)
        {
          WriteLine();

          var parameterDataType = !parameter.IsCursorParameter 
            ? GetType(parameter.DataType.SqlDataType)
            : typeof(IDataReader);
          var parameterName = parameter.Name.TrimStart('@');
          var parameterFieldName = "_" + parameterName.ToLowerCamelCase() + "Parameter";
            
          WriteLine("private readonly IDbDataParameter {0} = null;", parameterFieldName);
          WriteLine();
          Write(Modifier + " {0}", parameterDataType.Name);

          if (parameterDataType.IsValueType)
          {
            Write("?");
          }

          WriteLine(" {0}", parameterName.ToUpperCamelCase());

          using (this.Scope(Indent))
          {
            WriteLine("get");

            using (this.Scope(Indent))
            {
              WriteLine("return ({0}){1}.Value;", parameterDataType.Name, parameterFieldName);
            }
              
            WriteLine("set");

            using (this.Scope(Indent))
            {
              WriteLine("{0}.Value = value;", parameterFieldName);
            }
          }
        }

        WriteLine();
        WriteLine("public {0}(IDbConnection connection, IDbTransaction transaction = null, Int32? commandTimeout = null)", commandClassName);
        
        using (this.Scope(Indent))
        {
          WriteLine("{0} = connection.CreateCommand();", commandFieldName);
          WriteLine("{0}.CommandText = \"[{1}].[{2}]\";", commandFieldName, Procedure.Schema, Procedure.Name);
          WriteLine();
          WriteLine("if (commandTimeout.HasValue)");

          using (this.Scope(Indent))
          {
            WriteLine("{0}.CommandTimeout = commandTimeout.Value;", commandFieldName);
          }

          WriteLine();
          WriteLine("{0}.CommandType = CommandType.StoredProcedure;", commandFieldName);
          WriteLine("{0}.Transaction = transaction;", commandFieldName);
          
          foreach (var parameter in parameters)
          {
            WriteLine();
          
            var parameterName = parameter.Name.TrimStart('@');
            var parameterFieldName = "_" + parameterName.ToLowerCamelCase() + "Parameter";

            WriteLine("{0} = {1}.CreateParameter();", parameterFieldName, commandFieldName);

            if (!parameter.IsCursorParameter)
            {
              WriteLine("{0}.DbType = DbType.{1};", parameterFieldName, TranslateType(parameter.DataType.SqlDataType));
            }
            
            if (parameter.IsCursorParameter || parameter.IsOutputParameter)
            {
              WriteLine("{0}.Direction = ParameterDirection.Output;", parameterFieldName);
            }
            else if (parameter.IsOutputParameter)
            {
              WriteLine("{0}.Direction = ParameterDirection.InputOutput;", parameterFieldName);
            }
            else
            {
              WriteLine("{0}.Direction = ParameterDirection.Input;", parameterFieldName);
            }

            WriteLine("{0}.ParameterName = \"{1}\";", parameterFieldName, parameter.Name);

            if (parameter.DataType.MaximumLength > 1)
            {
              WriteLine("{0}.Size = {1};", parameterFieldName, parameter.DataType.MaximumLength);
            }

            WriteLine("{0}.Parameters.Add({1});", commandFieldName, parameterFieldName);
          }
        }
        
        WriteLine();
        WriteLine("void IDisposable.Dispose()");

        using (this.Scope(Indent))
        {
          WriteLine("{0}.Dispose();", commandFieldName);
        }
        
        WriteLine();
        WriteLine("public Int32 Execute()");

        using (this.Scope(Indent))
        {
          WriteLine("return {0}.ExecuteNonQuery();", commandFieldName);
        }
        
        WriteLine();
        WriteLine("public IEnumerable<TObject> ExecuteQuery<TObject>()");

        using (this.Scope(Indent))
        {
          WriteLine("using (var dataReader = {0}.ExecuteReader())", commandFieldName);

          using (this.Scope(Indent))
          {
            WriteLine("var mappingFunction = SqlMapper.GetTypeDeserializer(typeof(TObject), dataReader);");
            WriteLine();
            WriteLine("while (dataReader.Read())");

            using (this.Scope(Indent))
            {
              WriteLine("yield return (TObject)mappingFunction(dataReader);");
            }
          }
        }
        
        WriteLine();
        WriteLine("public IDataReader ExecuteReader()");

        using (this.Scope(Indent))
        {
          WriteLine("return {0}.ExecuteReader();", commandFieldName);
        }

        WriteLine();
        WriteLine("public Object ExecuteScalar()");

        using (this.Scope(Indent))
        {
          WriteLine("return {0}.ExecuteScalar();", commandFieldName);
        }

        WriteLine();
        WriteLine("public TResult ExecuteScalar<TResult>()");

        using (this.Scope(Indent))
        {
          WriteLine("return (TResult){0}.ExecuteScalar();", commandFieldName);
        }
      }
    }

    private DbType TranslateType(SqlDataType dataType)
    {
      switch (dataType)
      {
        case SqlDataType.Bit:
          return DbType.Boolean;

        case SqlDataType.BigInt:
          return DbType.Int64;

        case SqlDataType.DateTime:
        case SqlDataType.DateTime2:
          return DbType.DateTime;

        case SqlDataType.TinyInt:
          return DbType.Byte;

        case SqlDataType.Int:
          return DbType.Int32;

        case SqlDataType.SmallInt:
          return DbType.Int16;

        case SqlDataType.NVarChar:
        case SqlDataType.NVarCharMax:
        case SqlDataType.NText:
        case SqlDataType.Text:
        case SqlDataType.VarChar:
        case SqlDataType.VarCharMax:
          return DbType.String;

        default:
          return DbType.Object;
      }
    }
  }
#>
<#+
  public class TableTemplate : ClassTemplate
  {
    private Table Table
    {
      get;
      set;
    }

    public TableTemplate(Table table)
    {
      Table = table;
    }

    protected override void GenerateClassBody()
    {
      if (DefaultSchema.Equals(Table.Schema, StringComparison.OrdinalIgnoreCase))
      {
        GenerateTableClassBody();
      }
      else
      {
        WriteLine(Modifier + " static partial class {0}", Table.Schema);
          
        using (this.Scope(Indent))
        {
          GenerateTableClassBody();
        }
      }
    }

    private void GenerateTableClassBody()
    {
      WriteLine(Modifier + " partial class {0}Table", Table.Name);

      using (this.Scope(Indent))
      {
        foreach (var column in Table.Columns.Cast<Column>())
        {
          WriteLine(Modifier + " const String {0} = \"{1}\";", column.Name, column);
        }
      }
    }
  }
#>
<#+
  public class ViewTemplate : ClassTemplate
  {
    private View View
    {
      get;
      set;
    }

    public ViewTemplate(View view)
    {
      View = view;
    }
    
    protected override void GenerateClassBody()
    {
      if (DefaultSchema.Equals(View.Schema, StringComparison.OrdinalIgnoreCase))
      {
        GenerateViewClassBody();
      }
      else
      {
        WriteLine(Modifier + " static class {0}", View.Schema);
          
        using (this.Scope(Indent))
        {
          WriteLine(Modifier + " static class {0}View", View.Name);
        
          GenerateViewClassBody();
        }
      }
    }

    private void GenerateViewClassBody()
    {
      WriteLine(Modifier + " static class {0}View", View.Name);
            
      using (this.Scope(Indent))
      {
        foreach (var column in View.Columns.Cast<Column>())
        {
          WriteLine(Modifier + " const String {0} = \"{1}\";", column.Name, column);
        }
      }
    }
  }
#>
<#+
  public class ModelTemplate : ClassTemplate
  {
    protected override String Class
    {
      get
      {
        return Table.Name;
      }
    }

    protected override String Namespace
    {
      get
      {
        return base.Namespace + ".Models";
      }
    }

    private Table Table
    {
      get;
      set;
    }

    public ModelTemplate(Table table)
    {
      Table = table;
    }

    protected override void GenerateClassBody()
    {
      var columns = Table.Columns.Cast<Column>().ToArray();

      foreach (var column in columns)
      {
        if (column != columns.First())
        {
          WriteLine();
        }

        var columnType = GetType(column.DataType.SqlDataType);
        var columnTypeName = columnType.Name;

        if (column.Identity && columnType.IsValueType)
        {
          columnTypeName += "?";
        }

        WriteLine(Modifier + " virtual {0} {1}", columnTypeName, column.Name);

        using (this.Scope(Indent))
        {
          WriteLine("get;");
          WriteLine("set;");
        }
      }
    }
  }
#>