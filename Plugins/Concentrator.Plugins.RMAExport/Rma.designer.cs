#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Concentrator.Plugins.RMAExport
{
  using System.Data.Linq;
  using System.Data.Linq.Mapping;
  using System.Data;
  using System.Collections.Generic;
  using System.Reflection;
  using System.Linq;
  using System.Linq.Expressions;
  using System.ComponentModel;
  using System;


  [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "Sennheiser_Development")]
  public partial class RmaDataContext : System.Data.Linq.DataContext
  {

    private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    #endregion

    public RmaDataContext(string connection) :
      base(connection, mappingSource)
    {
      OnCreated();
    }

    public RmaDataContext(System.Data.IDbConnection connection) :
      base(connection, mappingSource)
    {
      OnCreated();
    }

    public RmaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
      base(connection, mappingSource)
    {
      OnCreated();
    }

    public RmaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
      base(connection, mappingSource)
    {
      OnCreated();
    }

    public System.Data.Linq.Table<Product> Products
    {
      get
      {
        return this.GetTable<Product>();
      }
    }
  }

  [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Product")]
  public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
  {

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

    private int _ProductID;

    private string _Barcode;

    private bool _isConsumer;

    private string _ImageURL;

    private System.Nullable<int> _ConcentratorIdentifier;

    private string _Name;

    private string _Description;

    private string _ItemNumber;

    private bool _IsActive;

    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnBarcodeChanging(string value);
    partial void OnBarcodeChanged();
    partial void OnisConsumerChanging(bool value);
    partial void OnisConsumerChanged();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    partial void OnConcentratorIdentifierChanging(System.Nullable<int> value);
    partial void OnConcentratorIdentifierChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnItemNumberChanging(string value);
    partial void OnItemNumberChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion

    public Product()
    {
      OnCreated();
    }

    [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ProductID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
    public int ProductID
    {
      get
      {
        return this._ProductID;
      }
      set
      {
        if ((this._ProductID != value))
        {
          this.OnProductIDChanging(value);
          this.SendPropertyChanging();
          this._ProductID = value;
          this.SendPropertyChanged("ProductID");
          this.OnProductIDChanged();
        }
      }
    }

    [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Barcode", DbType = "NVarChar(100)")]
    public string Barcode
    {
      get
      {
        return this._Barcode;
      }
      set
      {
        if ((this._Barcode != value))
        {
          this.OnBarcodeChanging(value);
          this.SendPropertyChanging();
          this._Barcode = value;
          this.SendPropertyChanged("Barcode");
          this.OnBarcodeChanged();
        }
      }
    }

    [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_isConsumer", DbType = "Bit NOT NULL")]
    public bool isConsumer
    {
      get
      {
        return this._isConsumer;
      }
      set
      {
        if ((this._isConsumer != value))
        {
          this.OnisConsumerChanging(value);
          this.SendPropertyChanging();
          this._isConsumer = value;
          this.SendPropertyChanged("isConsumer");
          this.OnisConsumerChanged();
        }
      }
    }

    [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ImageURL", DbType = "NVarChar(150)")]
    public string ImageURL
    {
      get
      {
        return this._ImageURL;
      }
      set
      {
        if ((this._ImageURL != value))
        {
          this.OnImageURLChanging(value);
          this.SendPropertyChanging();
          this._ImageURL = value;
          this.SendPropertyChanged("ImageURL");
          this.OnImageURLChanged();
        }
      }
    }

    [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ConcentratorIdentifier", DbType = "Int")]
    public System.Nullable<int> ConcentratorIdentifier
    {
      get
      {
        return this._ConcentratorIdentifier;
      }
      set
      {
        if ((this._ConcentratorIdentifier != value))
        {
          this.OnConcentratorIdentifierChanging(value);
          this.SendPropertyChanging();
          this._ConcentratorIdentifier = value;
          this.SendPropertyChanged("ConcentratorIdentifier");
          this.OnConcentratorIdentifierChanged();
        }
      }
    }

    [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
    public string Name
    {
      get
      {
        return this._Name;
      }
      set
      {
        if ((this._Name != value))
        {
          this.OnNameChanging(value);
          this.SendPropertyChanging();
          this._Name = value;
          this.SendPropertyChanged("Name");
          this.OnNameChanged();
        }
      }
    }

    [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(500)")]
    public string Description
    {
      get
      {
        return this._Description;
      }
      set
      {
        if ((this._Description != value))
        {
          this.OnDescriptionChanging(value);
          this.SendPropertyChanging();
          this._Description = value;
          this.SendPropertyChanged("Description");
          this.OnDescriptionChanged();
        }
      }
    }

    [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ItemNumber", DbType = "NVarChar(50)")]
    public string ItemNumber
    {
      get
      {
        return this._ItemNumber;
      }
      set
      {
        if ((this._ItemNumber != value))
        {
          this.OnItemNumberChanging(value);
          this.SendPropertyChanging();
          this._ItemNumber = value;
          this.SendPropertyChanged("ItemNumber");
          this.OnItemNumberChanged();
        }
      }
    }

    [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IsActive")]
    public bool IsActive
    {
      get
      {
        return this._IsActive;
      }
      set
      {
        if ((this._IsActive != value))
        {
          this.OnIsActiveChanging(value);
          this.SendPropertyChanging();
          this._IsActive = value;
          this.SendPropertyChanged("IsActive");
          this.OnIsActiveChanged();
        }
      }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
      if ((this.PropertyChanging != null))
      {
        this.PropertyChanging(this, emptyChangingEventArgs);
      }
    }

    protected virtual void SendPropertyChanged(String propertyName)
    {
      if ((this.PropertyChanged != null))
      {
        this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
      }
    }
  }
}
#pragma warning restore 1591
